{"version":3,"sources":["App.js","api/GetAllTodos.js","api/PutTodoById.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","loading","setLoading","useEffect","a","axios","get","result","fetchData","GetAllTodos","todos","renderEditable","cellInfo","style","backgroundColor","contentEditable","suppressContentEditableWarning","onBlur","e","id","title","console","log","index","column","target","innerHTML","original","put","updateData","dangerouslySetInnerHTML","__html","columns","Header","accessor","Cell","props","defaultPageSize","className","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAwDeA,MAnDf,WAAgB,IAAD,ECFf,WAAwB,IAAD,EACGC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,OAESF,oBAAS,GAFlB,mBAEdG,EAFc,KAELC,EAFK,KAkBrB,OAdAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,6DACdF,GAAW,GADG,kBAGOG,IAAMC,IAAI,4DAHjB,OAGRC,EAHQ,OAIdP,EAAQO,EAAOR,MAJD,wDAQhBG,GAAW,GARK,yDAAH,qDAUfM,KACC,IAEI,CAACT,EAAME,GDdIQ,GAAVC,EAFK,oBAIPC,EAAiB,SAACC,GACtB,OAAQ,yBACNC,MAAO,CAAEC,gBAAiB,WAC1BC,iBAAe,EACfC,gCAA8B,EAC9BC,OAAQ,SAAAC,GACN,IEZaC,EAAIC,EFYXrB,EAAI,YAAOW,GACjBW,QAAQC,IAAIvB,GACZA,EAAKa,EAASW,OAAOX,EAASY,OAAOL,IAAMD,EAAEO,OAAOC,UEdvCP,EFiBDP,EAASe,SAASR,GEjBbC,EFiBiBrB,EAAKa,EAASW,OAAOX,EAASY,OAAOL,IEf3D,uCAAG,sBAAAf,EAAA,+EAGTC,IAAMuB,IAAN,mEAAsET,GAC5E,CACIC,MAAOA,IALI,8GAAH,oDAWhBS,IFMEC,wBAAyB,CACvBC,OAAQrB,EAAME,EAASW,OAAOX,EAASY,OAAOL,QAKpD,OACE,kBAAC,WAAD,KACA,kBAAC,IAAD,CACEpB,KAAMW,EACNsB,QAAS,CACP,CACEC,OAAQ,QACRC,SAAU,QACVC,KAAM,SAAAC,GAAK,OAAIzB,EAAeyB,MAGlCC,gBAAiB,GACjBC,UAAU,0BG5BIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCVNC,IAASC,OAAO,kBAAC,IAAD,CAAQC,SAAUC,8BAAwB,kBAAC,EAAD,OAAkBC,SAASC,eAAe,SDyH9F,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9999c172.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport ReactTable from \"react-table\";\nimport { GetAllTodos } from \"./api/GetAllTodos\";\nimport { PutTodoById } from \"./api/PutTodoById\";\n\nfunction App() {\n\n  const [ todos ] = GetAllTodos();\n\n  const renderEditable = (cellInfo) => {\n    return  <div\n      style={{ backgroundColor: \"#fafafa\" }}\n      contentEditable\n      suppressContentEditableWarning\n      onBlur={e => {\n        const data = [...todos];\n        console.log(data)\n        data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\n        // Put Todo still not working\n        // console.log(data[cellInfo.index][cellInfo.column.id]) // new title\n        PutTodoById(cellInfo.original.id, data[cellInfo.index][cellInfo.column.id]);\n      }}\n      dangerouslySetInnerHTML={{\n        __html: todos[cellInfo.index][cellInfo.column.id]\n      }}\n    />;\n  };\n\n  return (\n    <Fragment>\n    <ReactTable\n      data={todos}\n      columns={[\n        {\n          Header: \"Title\",\n          accessor: \"title\",\n          Cell: props => renderEditable(props)\n        }\n      ]}\n      defaultPageSize={10}\n      className=\"-striped -highlight\"\n    />\n      {/* {loading ? (\n        \"Loading...\"\n      ) : (\n        <ul>\n          {todos.map(({ id, title }) => (\n            <div key={id}>\n              {title}\n            </div>\n          ))}\n        </ul>\n      )} */}\n    </Fragment>\n  );\n}\nexport default App;","import { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\nfunction GetAllTodos() {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n        setLoading(false);\r\n      try {\r\n        const result = await axios.get('https://5cea41c50c871100140bf437.mockapi.io/api/v1/todos');\r\n        setData(result.data);\r\n      } catch (error) {\r\n        \r\n      }\r\n      setLoading(false);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return [data, loading];\r\n\r\n}\r\n\r\nexport { GetAllTodos };","import { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\nfunction PutTodoById(id, title) {\r\n\r\n    const updateData = async () => {\r\n      try {\r\n        \r\n        await axios.put(`https://5cea41c50c871100140bf437.mockapi.io/api/v1/todos/${id}`,\r\n        {\r\n            title: title,\r\n        });\r\n      } catch (error) {\r\n        \r\n      }\r\n    };\r\n    updateData();\r\n\r\n}\r\n\r\nexport { PutTodoById };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport \"react-table/react-table.css\";\r\n\r\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}